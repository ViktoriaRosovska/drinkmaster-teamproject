{"version":3,"file":"static/js/933.9028caa9.chunk.js","mappings":"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","sources":["components/Forms/AuthForm/SignupForm/CalendarSvgIcon.jsx","components/Forms/AuthForm/SignupForm/SignupForm.jsx","views/SignUpPage/SignUpPage.jsx"],"sourcesContent":["import { createSvgIcon } from '@mui/material/utils';\n\nexport const CalendarSvgIcon = createSvgIcon(\n  <svg\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 20 20\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M15.8333 3.33337H4.16667C3.24619 3.33337 2.5 4.07957 2.5 5.00004V16.6667C2.5 17.5872 3.24619 18.3334 4.16667 18.3334H15.8333C16.7538 18.3334 17.5 17.5872 17.5 16.6667V5.00004C17.5 4.07957 16.7538 3.33337 15.8333 3.33337Z\"\n      stroke=\"#F3F3F3\"\n      stroke-width=\"1.5\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n    <path\n      d=\"M13.333 1.66663V4.99996\"\n      stroke=\"#F3F3F3\"\n      stroke-width=\"1.5\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n    <path\n      d=\"M6.66699 1.66663V4.99996\"\n      stroke=\"#F3F3F3\"\n      stroke-width=\"1.5\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n    <path\n      d=\"M2.5 8.33337H17.5\"\n      stroke=\"#F3F3F3\"\n      stroke-width=\"1.5\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>,\n  'CalendarSvgIcon'\n);\n\n// function MuiIcon() {\n//   return (\n//     <img\n//       src=\"/src/assets/images/authComponents/calendar.svg\"\n//       alt=\"Date picker opening icon\"\n//       width={20}\n//       height={20}\n//     />\n//   );\n// }\n","import { Formik, ErrorMessage } from 'formik';\nimport moment from 'moment';\nimport { ToastContainer, toast, Slide } from 'react-toastify';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { authOperations } from 'redux/auth/authOperations';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport * as Yup from 'yup';\nimport {\n  Container,\n  AuthForm,\n  Input,\n  InputWrapper,\n  Title,\n  Button,\n  ToggleButton,\n  ErrorText,\n  ErrorSvgStyled,\n  CheckSvgStyled,\n  Link,\n  BirthDate,\n} from '../AuthForm.styled';\nimport { ReactComponent as ShowPassword } from '../../../../assets/images/authComponents/eye.svg';\nimport { ReactComponent as HidePassword } from '../../../../assets/images/authComponents/eye-off.svg';\nimport { CalendarSvgIcon } from './CalendarSvgIcon';\nimport { WelcomeWrapper } from 'styles/App.styled';\n\nconst initialValues = {\n  name: '',\n  birthDate: '',\n  email: '',\n  password: '',\n};\n\nconst schema = Yup.object().shape({\n  name: Yup.string().required('Name is required'),\n  birthDate: Yup.date().required('Date of Birth is required'),\n  email: Yup.string()\n    .matches(\n      /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/,\n      'Email must contain only digits, letters and . - _ symbols. e.g. example@mail.com'\n    )\n    .email('Invalid email format, example@mail.com')\n    .required('Email is required'),\n  password: Yup.string()\n    .min(6, 'Password must be at least 6 characters long')\n    .max(30, 'Password must be shorter')\n    .required('Password is required')\n    .matches(/[a-zA-Z]/, 'Password must contain at least one letter')\n    .matches(/[0-9]/, 'Password must contain at least one number'),\n});\n\nfunction SignupForm() {\n  const [showPassword, setShowPassword] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleTogglePassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    console.log('values', values);\n    const { name, birthDate, email, password } = values;\n\n    dispatch(authOperations.signUp({ name, birthDate, email, password }))\n      .unwrap()\n      .then(() => {\n        console.log('name:', name);\n        console.log('birthDate:', birthDate);\n        console.log('email:', email);\n        console.log('password:', password);\n        toast.success(`ðŸ¦„ Success!`, {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1500,\n        });\n      })\n      .catch(() => {\n        console.log('name:', name);\n        console.log('birthDate:', birthDate);\n        console.log('email:', email);\n        console.log('password:', password);\n\n        toast.error(`Something went wrong. Try again`, {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1500,\n        });\n      });\n\n    resetForm();\n  };\n\n  return (\n    <WelcomeWrapper>\n      <Container>\n        <ToastContainer transition={Slide} />\n        <Title>Sign Up</Title>\n        <Formik\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          validationSchema={schema}\n        >\n          {({ values, errors, touched }) => (\n            <AuthForm>\n              <InputWrapper>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder=\"Name\"\n                  error={errors.name && touched.name ? 'true' : 'false'}\n                  success={values.name && !errors.name ? 'true' : 'false'}\n                />\n                <ErrorMessage\n                  name=\"name\"\n                  render={message => <ErrorText>{message}</ErrorText>}\n                />\n                {errors.name && touched.name ? (\n                  <ErrorSvgStyled />\n                ) : values.name && !errors.name ? (\n                  <CheckSvgStyled />\n                ) : null}\n              </InputWrapper>\n\n              <InputWrapper>\n                <LocalizationProvider dateAdapter={AdapterDayjs}>\n                  <BirthDate\n                    name=\"birthDate\"\n                    value={moment(values.birthDate, 'DD MMM YYYY')}\n                    onChange={value => {\n                      values.birthDate = value\n                        ? value.format('DD MMM YYYY')\n                        : '';\n                    }}\n                    disableFuture\n                    showDaysOutsideCurrentMonth\n                    slotProps={{\n                      textField: { fullWidth: true },\n                    }}\n                    slots={{ openPickerIcon: CalendarSvgIcon }}\n                    error={\n                      errors.birthDate && touched.birthDate ? 'true' : 'false'\n                    }\n                    success={\n                      values.birthDate && !errors.birthDate ? 'true' : 'false'\n                    }\n                  />\n                  <ErrorMessage name=\"birthDate\" />\n                </LocalizationProvider>\n                {errors.birthDate && touched.birthDate ? (\n                  <ErrorText error>{errors.birthDate}</ErrorText>\n                ) : null}\n              </InputWrapper>\n\n              <InputWrapper>\n                <Input\n                  type=\"email\"\n                  name=\"email\"\n                  placeholder=\"Email\"\n                  error={errors.email && touched.email ? 'true' : 'false'}\n                  success={values.email && !errors.email ? 'true' : 'false'}\n                />\n                <ErrorMessage\n                  name=\"email\"\n                  render={message => <ErrorText>{message}</ErrorText>}\n                />\n                {errors.email && touched.email ? (\n                  <ErrorSvgStyled />\n                ) : values.email && !errors.email ? (\n                  <CheckSvgStyled />\n                ) : null}\n              </InputWrapper>\n\n              <InputWrapper>\n                <Input\n                  type={showPassword ? 'text' : 'password'}\n                  value={values.password}\n                  name=\"password\"\n                  placeholder=\"Password\"\n                  error={errors.password && touched.password ? 'true' : 'false'}\n                  success={\n                    values.password && !errors.password ? 'true' : 'false'\n                  }\n                />\n                <ErrorMessage\n                  name=\"password\"\n                  render={message => <ErrorText>{message}</ErrorText>}\n                />\n                {errors.password && touched.password && !values.password && (\n                  <ErrorSvgStyled />\n                )}\n                <ToggleButton type=\"button\" onClick={handleTogglePassword}>\n                  {values.password ? (\n                    showPassword ? (\n                      <ShowPassword />\n                    ) : (\n                      <HidePassword />\n                    )\n                  ) : null}\n                </ToggleButton>\n              </InputWrapper>\n\n              <Button type=\"submit\">Sign Up</Button>\n              <Link to=\"/signin\">Sign In</Link>\n            </AuthForm>\n          )}\n        </Formik>\n      </Container>\n    </WelcomeWrapper>\n  );\n}\n\nexport default SignupForm;\n","import SignupForm from '../../components/Forms/AuthForm/SignupForm/SignupForm';\n\nconst SignUpPage = () => {\n  return <SignupForm />;\n};\n\nexport default SignUpPage;\n"],"names":["CalendarSvgIcon","createSvgIcon","_jsxs","width","height","viewBox","fill","xmlns","children","_jsx","d","stroke","initialValues","name","birthDate","email","password","schema","Yup","shape","required","matches","min","max","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","dispatch","useDispatch","handleTogglePassword","WelcomeWrapper","Container","ToastContainer","transition","Slide","Title","Formik","onSubmit","values","_ref","resetForm","console","log","authOperations","signUp","unwrap","then","toast","success","position","POSITION","TOP_RIGHT","autoClose","catch","error","validationSchema","_ref2","errors","touched","AuthForm","InputWrapper","Input","type","placeholder","ErrorMessage","render","message","ErrorText","ErrorSvgStyled","CheckSvgStyled","LocalizationProvider","dateAdapter","AdapterDayjs","BirthDate","value","moment","onChange","format","disableFuture","showDaysOutsideCurrentMonth","slotProps","textField","fullWidth","slots","openPickerIcon","ToggleButton","onClick","ShowPassword","HidePassword","Button","Link","to","SignupForm"],"sourceRoot":""}