{"version":3,"file":"static/js/381.9308c5b2.chunk.js","mappings":"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","sources":["components/Forms/AuthForm/SigninForm/SigninForm.jsx","views/SignInPage/SignInPage.jsx"],"sourcesContent":["import { ErrorMessage, Formik } from 'formik';\nimport { ToastContainer, toast, Slide } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { authOperations } from 'redux/auth/authOperations';\nimport * as Yup from 'yup';\nimport {\n  Container,\n  Input,\n  InputWrapper,\n  AuthForm,\n  Title,\n  Button,\n  ToggleButton,\n  ErrorText,\n  ErrorSvgStyled,\n  CheckSvgStyled,\n  Link,\n} from '../AuthForm.styled';\nimport { ReactComponent as ShowPassword } from '../../../../assets/images/authComponents/eye.svg';\nimport { ReactComponent as HidePassword } from '../../../../assets/images/authComponents/eye-off.svg';\nimport { WelcomeWrapper } from 'styles/App.styled';\n\nconst initialValues = { email: '', password: '' };\nconst schema = Yup.object().shape({\n  email: Yup.string()\n    .matches(\n      /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/,\n      'Emails: digits, letters, . - _ only, e.g., example@mail.com.'\n    )\n    .email('Invalid email format, example@mail.com')\n    .required('Email is required'),\n  password: Yup.string()\n    .min(6, 'Password must be at least 6 characters long')\n    .max(30, 'Passwors must be shorter')\n    .required('Password is required')\n    .matches(/[a-zA-Z]/, 'Password must contain at least one letter')\n    .matches(/[0-9]/, 'Password must contain at least one number'),\n});\n\nexport default function SigninForm() {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleTogglePassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { email, password } = values;\n    dispatch(authOperations.signIn({ email, password }))\n      .unwrap()\n      .then(() => {\n        console.log('email:', email);\n        console.log('password:', password);\n        toast.success(`ðŸ¦„ Your login was successful!`, {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1500,\n        });\n      })\n      .catch(() => {\n        console.log('error email:', email);\n        console.log('password:', password);\n        toast.error(`Something went wrong. Try again`, {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1500,\n        });\n      });\n    resetForm();\n  };\n\n  return (\n    <WelcomeWrapper>\n      <Container>\n        <ToastContainer transition={Slide} />\n        <Title>Sign In</Title>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={schema}\n          onSubmit={handleSubmit}\n        >\n          {({ values, errors, touched }) => (\n            <AuthForm>\n              <>\n                <InputWrapper>\n                  <Input\n                    type=\"email\"\n                    name=\"email\"\n                    placeholder=\"Email\"\n                    error={errors.email && touched.email ? 'true' : 'false'}\n                    success={values.email && !errors.email ? 'true' : 'false'}\n                  />\n                  <ErrorMessage\n                    name=\"email\"\n                    render={message => <ErrorText>{message}</ErrorText>}\n                  />\n                  {errors.email && touched.email ? (\n                    <ErrorSvgStyled />\n                  ) : values.email && !errors.email ? (\n                    <CheckSvgStyled />\n                  ) : null}\n                </InputWrapper>\n\n                <InputWrapper>\n                  <Input\n                    type={showPassword ? 'text' : 'password'}\n                    value={values.password}\n                    name=\"password\"\n                    placeholder=\"Password\"\n                    error={\n                      errors.password && touched.password ? 'true' : 'false'\n                    }\n                    success={\n                      values.password && !errors.password ? 'true' : 'false'\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"password\"\n                    render={message => <ErrorText>{message}</ErrorText>}\n                  />\n                  {errors.password && touched.password && !values.password && (\n                    <ErrorSvgStyled />\n                  )}\n                  <ToggleButton type=\"button\" onClick={handleTogglePassword}>\n                    {values.password ? (\n                      showPassword ? (\n                        <ShowPassword />\n                      ) : (\n                        <HidePassword />\n                      )\n                    ) : null}\n                  </ToggleButton>\n                </InputWrapper>\n              </>\n\n              <Button type=\"submit\">Sign In</Button>\n            </AuthForm>\n          )}\n        </Formik>\n        <Link to=\"/signup\">Sign Up</Link>\n      </Container>\n    </WelcomeWrapper>\n  );\n}\n","import SigninForm from '../../components/Forms/AuthForm/SigninForm/SigninForm';\n\nconst SignInPage = () => {\n  return <SigninForm />;\n};\n\nexport default SignInPage;\n"],"names":["initialValues","email","password","schema","Yup","shape","matches","required","min","max","SigninForm","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","handleTogglePassword","dispatch","useDispatch","_jsx","WelcomeWrapper","children","_jsxs","Container","ToastContainer","transition","Slide","Title","Formik","validationSchema","onSubmit","values","_ref","resetForm","authOperations","signIn","unwrap","then","console","log","toast","success","position","POSITION","TOP_RIGHT","autoClose","catch","error","_ref2","errors","touched","AuthForm","_Fragment","InputWrapper","Input","type","name","placeholder","ErrorMessage","render","message","ErrorText","ErrorSvgStyled","CheckSvgStyled","value","ToggleButton","onClick","ShowPassword","HidePassword","Button","Link","to"],"sourceRoot":""}