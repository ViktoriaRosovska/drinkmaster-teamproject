{"version":3,"file":"static/js/127.dcbc9323.chunk.js","mappings":"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","sources":["components/Forms/AuthForm/SignupForm/SignupForm.jsx","views/SignUpPage/SignUpPage.jsx"],"sourcesContent":["import { Formik, ErrorMessage } from 'formik';\nimport moment from 'moment';\nimport { ToastContainer, toast, Slide } from 'react-toastify';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { authOperations } from 'redux/auth/authOperations';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport * as Yup from 'yup';\nimport {\n  Container,\n  AuthForm,\n  Input,\n  InputWrapper,\n  Title,\n  Button,\n  ToggleButton,\n  ErrorText,\n  ErrorSvgStyled,\n  CheckSvgStyled,\n  Link,\n  BirthDate,\n} from '../AuthForm.styled';\nimport { ReactComponent as ShowPassword } from '../../../../assets/images/authComponents/eye.svg';\nimport { ReactComponent as HidePassword } from '../../../../assets/images/authComponents/eye-off.svg';\nimport { WelcomeWrapper } from 'styles/App.styled';\n\nconst initialValues = {\n  name: '',\n  birthDate: '',\n  email: '',\n  password: '',\n};\n\nconst schema = Yup.object().shape({\n  name: Yup.string().required('Name is required'),\n  birthDate: Yup.date().required('Date of Birth is required'),\n  email: Yup.string()\n    .matches(\n      /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/,\n      'Email must contain only digits, letters and . - _ symbols. e.g. example@mail.com'\n    )\n    .email('Invalid email format, example@mail.com')\n    .required('Email is required'),\n  password: Yup.string()\n    .min(6, 'Password must be at least 6 characters long')\n    .max(30, 'Password must be shorter')\n    .required('Password is required')\n    .matches(/[a-zA-Z]/, 'Password must contain at least one letter')\n    .matches(/[0-9]/, 'Password must contain at least one number'),\n});\n\nfunction SignupForm() {\n  const [showPassword, setShowPassword] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleTogglePassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    console.log('values', values);\n    const { name, birthDate, email, password } = values;\n\n    dispatch(authOperations.signUp({ name, birthDate, email, password }))\n      .unwrap()\n      .then(() => {\n        console.log('name:', name);\n        console.log('birthDate:', birthDate);\n        console.log('email:', email);\n        console.log('password:', password);\n        toast.success(`ðŸ¦„ Success!`, {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1500,\n        });\n      })\n      .catch(() => {\n        console.log('name:', name);\n        console.log('birthDate:', birthDate);\n        console.log('email:', email);\n        console.log('password:', password);\n\n        toast.error(`Something went wrong. Try again`, {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1500,\n        });\n      });\n\n    resetForm();\n  };\n\n  return (\n    <WelcomeWrapper>\n      <Container>\n        <ToastContainer transition={Slide} />\n        <Title>Sign Up</Title>\n        <Formik\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          validationSchema={schema}\n        >\n          {({ values, errors, touched }) => (\n            <AuthForm>\n              <InputWrapper>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder=\"Name\"\n                  error={errors.name && touched.name ? 'true' : 'false'}\n                  success={values.name && !errors.name ? 'true' : 'false'}\n                />\n                <ErrorMessage\n                  name=\"name\"\n                  render={message => <ErrorText>{message}</ErrorText>}\n                />\n                {errors.name && touched.name ? (\n                  <ErrorSvgStyled />\n                ) : values.name && !errors.name ? (\n                  <CheckSvgStyled />\n                ) : null}\n              </InputWrapper>\n\n              <InputWrapper>\n                <LocalizationProvider dateAdapter={AdapterDayjs}>\n                  <BirthDate\n                    name=\"birthDate\"\n                    value={moment(values.birthDate, 'DD MMM YYYY')}\n                    onChange={value => {\n                      values.birthDate = value\n                        ? value.format('DD MMM YYYY')\n                        : '';\n                    }}\n                    disableFuture\n                    showDaysOutsideCurrentMonth\n                    slotProps={{\n                      textField: { fullWidth: true },\n                    }}\n                    error={\n                      errors.birthDate && touched.birthDate ? 'true' : 'false'\n                    }\n                    success={\n                      values.birthDate && !errors.birthDate ? 'true' : 'false'\n                    }\n                  />\n                  <ErrorMessage name=\"birthDate\" />\n                </LocalizationProvider>\n                {errors.birthDate && touched.birthDate ? (\n                  <ErrorText error>{errors.birthDate}</ErrorText>\n                ) : null}\n              </InputWrapper>\n\n              <InputWrapper>\n                <Input\n                  type=\"email\"\n                  name=\"email\"\n                  placeholder=\"Email\"\n                  error={errors.email && touched.email ? 'true' : 'false'}\n                  success={values.email && !errors.email ? 'true' : 'false'}\n                />\n                <ErrorMessage\n                  name=\"email\"\n                  render={message => <ErrorText>{message}</ErrorText>}\n                />\n                {errors.email && touched.email ? (\n                  <ErrorSvgStyled />\n                ) : values.email && !errors.email ? (\n                  <CheckSvgStyled />\n                ) : null}\n              </InputWrapper>\n\n              <InputWrapper>\n                <Input\n                  type={showPassword ? 'text' : 'password'}\n                  value={values.password}\n                  name=\"password\"\n                  placeholder=\"Password\"\n                  error={errors.password && touched.password ? 'true' : 'false'}\n                  success={\n                    values.password && !errors.password ? 'true' : 'false'\n                  }\n                />\n                <ErrorMessage\n                  name=\"password\"\n                  render={message => <ErrorText>{message}</ErrorText>}\n                />\n                {errors.password && touched.password && !values.password && (\n                  <ErrorSvgStyled />\n                )}\n                <ToggleButton type=\"button\" onClick={handleTogglePassword}>\n                  {values.password ? (\n                    showPassword ? (\n                      <ShowPassword />\n                    ) : (\n                      <HidePassword />\n                    )\n                  ) : null}\n                </ToggleButton>\n              </InputWrapper>\n\n              <Button type=\"submit\">Sign Up</Button>\n              <Link to=\"/signin\">Sign In</Link>\n            </AuthForm>\n          )}\n        </Formik>\n      </Container>\n    </WelcomeWrapper>\n  );\n}\n\nexport default SignupForm;\n","import SignupForm from '../../components/Forms/AuthForm/SignupForm/SignupForm';\n\nconst SignUpPage = () => {\n  return <SignupForm />;\n};\n\nexport default SignUpPage;\n"],"names":["initialValues","name","birthDate","email","password","schema","Yup","shape","required","matches","min","max","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","dispatch","useDispatch","handleTogglePassword","_jsx","WelcomeWrapper","children","_jsxs","Container","ToastContainer","transition","Slide","Title","Formik","onSubmit","values","_ref","resetForm","console","log","authOperations","signUp","unwrap","then","toast","success","position","POSITION","TOP_RIGHT","autoClose","catch","error","validationSchema","_ref2","errors","touched","AuthForm","InputWrapper","Input","type","placeholder","ErrorMessage","render","message","ErrorText","ErrorSvgStyled","CheckSvgStyled","LocalizationProvider","dateAdapter","AdapterDayjs","BirthDate","value","moment","onChange","format","disableFuture","showDaysOutsideCurrentMonth","slotProps","textField","fullWidth","ToggleButton","onClick","ShowPassword","HidePassword","Button","Link","to","SignupForm"],"sourceRoot":""}